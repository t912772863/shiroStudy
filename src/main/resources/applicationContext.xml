<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:context="http://www.springframework.org/schema/context"
	xmlns:util="http://www.springframework.org/schema/util" xmlns:jee="http://www.springframework.org/schema/jee"
	xmlns:tx="http://www.springframework.org/schema/tx" xmlns:task="http://www.springframework.org/schema/task"
	xmlns:mvc="http://www.springframework.org/schema/mvc" xmlns:aop="http://www.springframework.org/schema/aop"
	xsi:schemaLocation="
		http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd
		http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context.xsd
		http://www.springframework.org/schema/util http://www.springframework.org/schema/util/spring-util.xsd
		http://www.springframework.org/schema/jee http://www.springframework.org/schema/jee/spring-jee.xsd
		http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx.xsd
		http://www.springframework.org/schema/task http://www.springframework.org/schema/task/spring-task.xsd
		http://www.springframework.org/schema/mvc http://www.springframework.org/schema/mvc/spring-mvc.xsd
		http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop.xsd">

	<!--先在上面引入aop相关的命名空间 ,然后打开aop应用,实现对aop相关的注解的支持 -->
	<aop:aspectj-autoproxy />

	<!--把本地的property配置文件引用进来,这样在这个xml文件中某些变量就不用写死了,可以用${key}的方式来获取  -->
	<context:property-placeholder location="classpath:business.properties" />

	<!--全局异常处理-->
	<!--<bean id="exceptionHandler" class="com.tian.happyfood.controller.common.DefaultExceptionHandler"/>-->

	<!-- 加载数据源1 -->
	<!--<bean id="dbcpdatasource" class="org.apache.commons.dbcp.BasicDataSource">
		<property name="username" value="${data_source_username}"></property>
		<property name="password" value="${data_source_password}"></property>
		<property name="url" value="${data_source_url}"></property>
		<property name="driverClassName" value="com.mysql.jdbc.Driver"></property>
		&lt;!&ndash;池启动时创建的连接数&ndash;&gt;
		<property name="initialSize" value="1"></property>
		&lt;!&ndash;最大连接数, 设为0表示不限制&ndash;&gt;
		<property name="maxActive" value="20"></property>
		&lt;!&ndash;最多不释放的空闲连接&ndash;&gt;
		<property name="maxIdle" value="2"></property>
		&lt;!&ndash;同一时间能够分配的preparedStatement数量&ndash;&gt;
		<property name="maxOpenPreparedStatements" value="5"></property>
		&lt;!&ndash;获取连接时最大等待时间, -1表示无限等待&ndash;&gt;
		<property name="maxWait" value="60"></property>
	</bean>-->

	<!--<bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
		<property name="dataSource" ref="dbcpdatasource" />
		<property name="mapperLocations" value="classpath:com/tian/happyfood/dao/mapper/*.xml"></property>
		&lt;!&ndash;添加一个mybatis插件实现不同数据库的默认分页&ndash;&gt;
		&lt;!&ndash;<property name="plugins">
			<array>
				<bean class="com.tian.happyfood.dao.common.PageInterceptor">
					<property name="properties">
						<value>
							property-key=property-value
						</value>
					</property>
				</bean>
			</array>
		</property>&ndash;&gt;
	</bean>-->

	<!--加载dao层 -->
	<!--<bean class="org.mybatis.spring.mapper.MapperScannerConfigurer">
		<property name="basePackage" value="com.tian.happyfood.dao.mapper"></property>
	</bean>-->

	<!-- 组件扫描 加载dao,service和Controller -->
	<context:component-scan base-package="com.tian.shirostudy"></context:component-scan>

	<!-- 使用mvc:annotation-driven代替上边的注解映射器和注解适配器, 而且会默认加载一些常用的参数,所以这种配置方式 是开发中真正
		常用的. -->
	<mvc:annotation-driven>
		<mvc:message-converters register-defaults="true">
			<!--解决返回String时乱码-->
			<bean class="org.springframework.http.converter.StringHttpMessageConverter">
				<property name="supportedMediaTypes">
					<list>
						<value>text/plain;charset=UTF-8</value>
						<value>text/html;charset=UTF-8</value>
					</list>
				</property>
			</bean>
			<!--spring4中通过@ResponseBody返回json格式化-->
			<bean class="org.springframework.http.converter.json.MappingJackson2HttpMessageConverter">
				<property name="objectMapper">
					<bean class="com.fasterxml.jackson.databind.ObjectMapper">
						<!--格式化时间的参数-->
						<property name="dateFormat">
							<bean class="java.text.SimpleDateFormat">
								<constructor-arg type="java.lang.String" value="yyyy-MM-dd HH:mm:ss" />
							</bean>
						</property>
						<!--排除生成json的null值-->
						<property name="serializationInclusion">
							<value type="com.fasterxml.jackson.annotation.JsonInclude.Include">NON_NULL</value>
						</property>
					</bean>
				</property>
			</bean>
		</mvc:message-converters>
	</mvc:annotation-driven>

	<!-- view视图解析器 -->
	<bean
		class="org.springframework.web.servlet.view.InternalResourceViewResolver">
		<!--配置返回jsp页面的路径的前缀和后缀,这样可以在controller中的ModelAndView中setview时少写一些代码 -->
		<property name="prefix" value="/views/"></property>
		<property name="suffix" value=".html"></property>
	</bean>


	<!--静态文件的访问:
	  比如jsp文件中引入的js文件,如果不加这个静态文件拦截器,会解析成请求路径,这样就会找不到对应的mapping,报404错误
	-->
	<mvc:default-servlet-handler/>

	<!-- 配置事务 -->
	<!--<bean id="transactionManager" class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
		<property name="dataSource" ref="dbcpdatasource"  />
	</bean>-->

	<!-- 自动注入事物,也就是@Transaction注解的处理器-->
	<!--<tx:annotation-driven transaction-manager="transactionManager" />-->

	<task:annotation-driven />

	<!--配置使可以通过注解简化读取配置文件 -->
	<bean id="appProperty"
		class="org.springframework.beans.factory.config.PropertyPlaceholderConfigurer">
		<property name="locations">
			<array>
				<value>classpath:business.properties</value>
			</array>
		</property>
	</bean>

	<!--拦截器配置-->
	<!--<mvc:interceptors>
		<mvc:interceptor>
			<mvc:mapping path="/*"/>
			<mvc:exclude-mapping path="/login"/>
			<mvc:exclude-mapping path="/insert"/>
			<mvc:exclude-mapping path="/get"/>
			<mvc:exclude-mapping path="/index.html"/>
			<bean class="com.tian.happyfood.controller.interceptor.LoginHandlerInterceptor">
				&lt;!&ndash;低版本的spring不支付exclude-mapping,所在可以通过注入值的方式,在拦截器里面处理相关的逻辑&ndash;&gt;
				&lt;!&ndash;<property name="uncheckUrls">
					<list>
						<value>/user/login</value>
					</list>
				</property>&ndash;&gt;
			</bean>
		</mvc:interceptor>
	</mvc:interceptors>-->

	<!--文件上传-->
	<bean id="multipartResolver" class="org.springframework.web.multipart.commons.CommonsMultipartResolver">
		<property name="maxUploadSize" value="10485760" />
	</bean>

	<!--shiro核心的安全管理类:
		1. 缓存管理器
		2. realm负责处理获取数据的
	-->
	<bean id="securityManager" class="org.apache.shiro.web.mgt.DefaultWebSecurityManager">
		<property name="cacheManager" ref="cacheManager"/>
		<property name="realm" ref="jdbcRealm"/>
	</bean>

	<!--hibernate缓存框架-->
	<bean id="cacheManager" class="org.apache.shiro.cache.ehcache.EhCacheManager">
		<property name="cacheManagerConfigFile" value="classpath:ehcache.xml"/>
	</bean>

	<bean id="jdbcRealm" class="com.tian.shirostudy.ShiroRealm"></bean>

	<!--这个bean用来管理spring容器中, shiro常用的对象-->
	<bean id="lifecycleBeanPostProcessor" class="org.apache.shiro.spring.LifecycleBeanPostProcessor"/>

	<!--启用shiro中的注解-->
	<bean class="org.springframework.aop.framework.autoproxy.DefaultAdvisorAutoProxyCreator" depends-on="lifecycleBeanPostProcessor"/>
	<bean class="org.apache.shiro.spring.security.interceptor.AuthorizationAttributeSourceAdvisor">
		<property name="securityManager" ref="securityManager"/>
	</bean>

	<!--网络方面-->
	<bean id="secureRemoteInvocationExecutor" class="org.apache.shiro.spring.remoting.SecureRemoteInvocationExecutor">
		<property name="securityManager" ref="securityManager"/>
	</bean>

	<!--配置shiro过滤器-->
	<bean id="shiroFilter" class="org.apache.shiro.spring.web.ShiroFilterFactoryBean">
		<property name="securityManager" ref="securityManager"/>
		<property name="loginUrl" value="/login.jsp"/>
		<property name="successUrl" value="/success.jsp"/>
		<property name="unauthorizedUrl" value="/abc.jsp"/>

		<!--我们要完成的shiro过滤器的具体配置
			anon, 未授权就可以访问的
			authc, 认证后才可访问的资源
		-->
		<property name="filterChainDefinitions">
			<value>
				/login.jsp = anon
				/** = authc
			</value>
		</property>
	</bean>

</beans>